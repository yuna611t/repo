// Generated by CoffeeScript 1.9.3

/*
CoffeeScriptの基本文法
 */

(function() {
  var Dog, ExtendDog, Figure, area, ary, ary1, bmi, body, color, dog, hash, hash1, hoge, i, initial, j, k, key, l, len, msg, picture, point, product, title, value, x,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  i = 1;

  if (i === 1) {
    console.log('変数iは1');
  }


  /* 同盟変数の扱い */

  x = 100;

  hoge = function() {

    /* コンパイル後グローバル変数として扱われる */
    x = 200;
  };


  /* 変数展開 */

  title = 'Rails4';

  msg = "Let's try , " + title + " !!";

  console.log(msg);


  /* ヒアドキュメント */

  body = "ヒアドキュメントの\nサンプル";

  console.log(body);


  /* 配列・ハッシュ */

  ary1 = [100, 200, 300];

  hash1 = {
    a: 100,
    b: 200,
    c: 300
  };


  /* YAMLっぽい階層構造 */

  picture = {
    Landscape: {
      title: '雪と梅',
      price: 1000,
      "delete": false
    },
    Portrait: {
      title: '傘さす子ども',
      price: 2500,
      "delete": false
    }
  };


  /* 存在チェック */

  if (title != null) {
    console.log(title);
  }

  value = null;

  if (value == null) {
    value = "wing";
  }

  initial = value != null ? value : 0;


  /* 関数funcが存在する場合のみ実行 */

  console.log(typeof func === "function" ? func() : void 0);


  /* オブジェクトobjが存在する場合fooにアクセス */

  console.log(typeof obj !== "undefined" && obj !== null ? obj.foo : void 0);


  /* if文 */

  if (x === 1) {
    console.log("1");
  } else {
    console.log("not 1");
  }

  x = 1;

  if (x === 1) {
    console.log('success');
  }


  /* switch case */

  point = 1;

  switch (point) {
    case 3:
      console.log('3');
      break;
    case 2:
    case 1:
      console.log('2 or 1');
      break;
    default:
      console.log("else");
  }


  /* while */

  i = 0;

  while (i < 10) {
    console.log(i);
    i++;
  }


  /* for */

  ary = ['Red', 'Yellow', 'Green'];

  for (j = 0, len = ary.length; j < len; j++) {
    color = ary[j];
    console.log(color);
  }

  hash = {
    name: 'Uta',
    age: 1,
    kind: 'hamster'
  };

  for (key in hash) {
    value = hash[key];
    console.log(key + "=" + value);
  }

  for (i = k = 5; k <= 10; i = ++k) {
    console.log(i);
  }

  for (i = l = 5; l < 10; i = ++l) {
    console.log(i);
  }


  /* 関数 */

  bmi = function(height, weight) {
    return weight / (height * height);
  };

  console.log(bmi(1.65, 70));

  area = function(base, height, type) {
    if (type == null) {
      type = 'triangle';
    }
    if (type === 'triangle') {
      return base * height / 2;
    } else {
      return base * height;
    }
  };

  console.log(area(2, 4));

  product = function() {
    var len1, m, num, nums, total;
    nums = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    total = 1;
    for (m = 0, len1 = nums.length; m < len1; m++) {
      num = nums[m];
      total *= num;
    }
    return total;
  };

  console.log(product(1, 3, 5, 8, 10, 20));


  /* 匿名関数 */


  /*
  $ ->
      $('#button').hover ->
          $(this).attr 'src', 'enter.gif'
          return
      , ->
          $(this).attr 'src', 'out.gif'
          return
      return
   */


  /* class */

  Dog = (function() {
    Dog.prototype.voice = 'わんわん';

    function Dog(name) {
      this.name = name;
    }

    Dog.prototype.bark = function() {
      console.log(this.name + "は" + this.voice + "吠えています");
    };

    return Dog;

  })();

  dog = new Dog('シロ');

  dog.bark();

  ExtendDog = (function(superClass) {
    extend(ExtendDog, superClass);

    function ExtendDog() {
      return ExtendDog.__super__.constructor.apply(this, arguments);
    }

    ExtendDog.prototype.bark = function() {
      ExtendDog.__super__.bark.call(this);
      console.log("大声で");
    };

    return ExtendDog;

  })(Dog);

  dog = new ExtendDog('クロ');

  dog.bark();

  Dog.prototype.eat = function() {
    console.log(this.name + "は食べています");
  };

  dog = new Dog("グレイ");

  dog.eat();

  Figure = (function() {
    function Figure() {}

    Figure.pi = 3.14;

    Figure.square = function(base, height) {
      return base * height;
    };

    return Figure;

  })();

  console.log(Figure.pi);

  console.log(Figure.square(3, 4));

}).call(this);
